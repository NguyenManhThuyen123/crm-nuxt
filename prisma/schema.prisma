generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String    @id @default(uuid())
  name      String
  address   String?
  contact   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
  products  Product[]
  users     User[]

  @@map("tenants")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  username  String?
  role      UserRole  @default(SELLER)
  tenantId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
  invoices  Invoice[]
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@map("users")
}

model Contact {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  phone      String?
  company    String?
  position   String?
  address    String?
  department String?
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  notes      Notes[]

  @@map("contacts")
}

model Notes {
  id        Int      @id @default(autoincrement())
  contactId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id])

  @@map("notes")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  category    String?
  tenantId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  variants    ProductVariant[]
  tenant      Tenant           @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([tenantId, category])
  @@map("products")
}

model ProductVariant {
  id           Int           @id @default(autoincrement())
  barcode      String        @unique
  weight       Float
  price        Decimal       @db.Decimal(10, 2)
  stock        Int           @default(0)
  productId    Int
  tenantId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
  product      Product       @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@index([barcode])
  @@index([tenantId, stock])
  @@map("product_variants")
}

model Invoice {
  id          Int           @id @default(autoincrement())
  totalAmount Decimal       @db.Decimal(10, 2)
  userId      Int
  tenantId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       InvoiceItem[]
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([tenantId, createdAt])
  @@map("invoices")
}

model InvoiceItem {
  id         Int            @id @default(autoincrement())
  quantity   Int
  unitPrice  Decimal        @db.Decimal(10, 2)
  totalPrice Decimal        @db.Decimal(10, 2)
  invoiceId  Int
  variantId  Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  invoice    Invoice        @relation(fields: [invoiceId], references: [id])
  variant    ProductVariant @relation(fields: [variantId], references: [id])

  @@index([invoiceId])
  @@index([variantId])
  @@map("invoice_items")
}

enum UserRole {
  ADMIN
  SELLER
}
